version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8001:8000" # Expose backend on host port 8001
    env_file:
      - ./backend/.env # Load environment variables
    environment:
      - RUNNING_IN_DOCKER=true
      - ENVIRONMENT=production
      - DEBUG=false
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be ready
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    # No volume mounts in production - all files are baked into the image
    # No reload in production for better performance
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80" # Expose frontend on host port 80
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api # Configured for reverse proxy
    depends_on:
      - backend
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  db:
    image: postgres:15-alpine # Use PostgreSQL 15
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persist data
    # Not exposing DB port in production for security
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?Database user is required}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password is required}
      POSTGRES_DB: ${POSTGRES_DB:-knowledgeplan_prod}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB:-knowledgeplan_prod}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

volumes:
  postgres_data: # Define the volume for data persistence