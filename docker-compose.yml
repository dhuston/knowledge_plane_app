version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8001:8000" # Expose backend on host port 8001
    volumes:
      # Only map necessary directories for development
      - ./backend/app:/app/app
      - ./backend/scripts:/app/scripts
      - ./backend/alembic.ini:/app/alembic.ini
      # Use a named volume for the venv to prevent overwriting
      - backend_venv:/app/.venv
    env_file:
      - ./backend/.env # Load environment variables
    environment:
      - RUNNING_IN_DOCKER=true
      - OPENAI_API_KEY=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
      # Using the PostgreSQL image without PostGIS, so we need to disable spatial features
      - USE_SPATIAL_FEATURES=false
      # Development settings for proper DB usage
      - ENVIRONMENT=development
      - DEBUG=true
      - BYPASS_DB_FOR_DEMO=false
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be ready
    # Add health check for backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload # Use reload for dev
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  db:
    image: postgres:15 # Standard PostgreSQL 15 image
    platform: linux/arm64/v8  # Match your host platform
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persist data
      - /tmp/schema_setup.sql:/docker-entrypoint-initdb.d/schema_setup.sql # Initialize schema
    ports:
      - "5433:5432" # Expose DB on host port 5433 (avoid conflict with local install)
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?Database user is required}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Database password is required}
      POSTGRES_DB: ${POSTGRES_DB:-knowledgeplan_dev}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB:-knowledgeplan_dev}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  postgres_data: # Define the volume for data persistence 
  backend_venv: # Define the named volume for the virtual environment