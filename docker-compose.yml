services:
  backend:
    # Use existing image instead of building
    image: biosphere_alpha-backend:latest
    ports:
      - "8001:8000" # Expose backend on host port 8001
    volumes:
      # Only map necessary directories for development
      - ./backend/app:/app/app
      - ./backend/alembic.ini:/app/alembic.ini
      - ./scripts:/app/scripts
      # Use a named volume for the venv to prevent overwriting
      - backend_venv:/app/.venv
    env_file:
      - ./.env # Use consolidated environment file
    environment:
      - RUNNING_IN_DOCKER=true
      # Enable spatial features since we're using PostGIS now
      - USE_SPATIAL_FEATURES=true
      - BYPASS_DB_FOR_DEMO=false
      - SKIP_MIGRATION_CHECK=true  # Disable migration checks on startup
      - OPENAI_MODEL=gpt-4-1-mini  # Explicitly set OpenAI model
      - VITE_OPENAI_MODEL=gpt-4-1-mini
      # Disable proxy settings which are causing connection issues
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - NO_PROXY=
    depends_on:
      - db
    # Add health check for backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    # Run initial migration then start app
    command: >
      bash -c "
              alembic upgrade 0001_baseline_schema &&
              uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  db:
    image: postgres:15-alpine # Use official PostgreSQL Alpine image for simplicity
    # Removed platform specification to use default
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata # Different mount path
    ports:
      - "5433:5432" # Expose DB on host port 5433 (avoid conflict with local install)
    # Simplified command that just starts PostgreSQL without attempting to modify pg_hba.conf
    command: ["postgres"]
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-knowledgeplan_dev}
      PGDATA: /var/lib/postgresql/data/pgdata # Set PGDATA to match volume mount
    restart: unless-stopped
    # Add resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  frontend:
    # Use existing image instead of building
    image: biosphere_alpha-frontend:latest
    ports:
      - "5173:5173" # Expose frontend on host port 5173
    volumes:
      # Mount source code for development
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      - ./frontend/vite.config.ts:/app/vite.config.ts
    env_file:
      - ./.env # Use consolidated environment file
    environment:
      - RUNNING_IN_DOCKER=true
      # Use correct API URL for inside Docker
      - VITE_API_BASE_URL=/api
      - API_BASE_URL=/api
      # AI model settings
      - VITE_OPENAI_MODEL=gpt-4-1-mini
      - OPENAI_MODEL=gpt-4-1-mini
      # Disable proxy settings which might interfere
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - NO_PROXY=
    command: npm run dev -- --host
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  postgres_data: # Define the volume for data persistence 
  backend_venv: # Define the named volume for the virtual environment