name: Test Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run frontend tests with coverage
        working-directory: ./frontend
        run: npm run test:coverage
      
      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage/
      
      - name: Check coverage thresholds
        working-directory: ./frontend
        run: |
          COVERAGE_TOTAL=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE_TOTAL%"
          if (( $(echo "$COVERAGE_TOTAL < 80" | bc -l) )); then
            echo "Coverage below threshold of 80%"
            exit 1
          fi
  
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: backend/pyproject.toml
      
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install
      
      - name: Run backend tests with coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          JWT_SECRET_KEY: test_secret_key_for_testing_only
          JWT_ALGORITHM: HS256
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
          OPENAI_API_KEY: sk-test-key-not-real
        run: |
          python -m pytest --cov=app --cov-report=xml --cov-report=term
      
      - name: Upload backend coverage report
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage.xml
      
      - name: Check coverage thresholds
        working-directory: ./backend
        run: |
          coverage report --fail-under=80
  
  coverage-report:
    needs: [frontend-tests, backend-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all coverage reports
        uses: actions/download-artifact@v3
      
      - name: Display combined coverage summary
        run: |
          echo "## Coverage Report Summary" > coverage_summary.md
          echo "### Frontend Coverage" >> coverage_summary.md
          if [ -f frontend-coverage/coverage-summary.json ]; then
            FRONTEND_COVERAGE=$(cat frontend-coverage/coverage-summary.json | jq '.total.lines.pct')
            echo "- Lines: $FRONTEND_COVERAGE%" >> coverage_summary.md
          else
            echo "- No frontend coverage data available" >> coverage_summary.md
          fi
          
          echo "### Backend Coverage" >> coverage_summary.md
          if [ -f backend-coverage/coverage.xml ]; then
            BACKEND_COVERAGE=$(grep -o 'line-rate="[0-9.]*"' backend-coverage/coverage.xml | head -1 | cut -d'"' -f2)
            BACKEND_COVERAGE_PCT=$(echo "$BACKEND_COVERAGE * 100" | bc -l | xargs printf "%.2f")
            echo "- Lines: $BACKEND_COVERAGE_PCT%" >> coverage_summary.md
          else
            echo "- No backend coverage data available" >> coverage_summary.md
          fi
          
          cat coverage_summary.md
      
      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: coverage_summary.md