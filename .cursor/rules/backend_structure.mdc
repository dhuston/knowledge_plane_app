---
description:
globs:
alwaysApply: false
---
# Backend Code Structure

The backend is built with FastAPI and follows a modular structure primarily located within the `knowledgeplan-backend/app` directory:

*   **Main Application:** The FastAPI app instance is created and configured in `[app/main.py](mdc:knowledgeplan-backend/app/main.py)`.
*   **API Endpoints:** The actual API route implementations (path operation functions using `@router.get`, `@router.post`, etc.) reside in `[app/api/v1/endpoints/](mdc:knowledgeplan-backend/app/api/v1/endpoints/)`. Each file corresponds to a feature or model (e.g., `[auth.py](mdc:knowledgeplan-backend/app/api/v1/endpoints/auth.py)`, `[projects.py](mdc:knowledgeplan-backend/app/api/v1/endpoints/projects.py)`).
*   **API Routers:** Routers from the `endpoints` directory are aggregated and re-exported by files in `[app/api/routers/](mdc:knowledgeplan-backend/app/api/routers/)` (e.g., `[auth.py](mdc:knowledgeplan-backend/app/api/routers/auth.py)`). The `[__init__.py](mdc:knowledgeplan-backend/app/api/routers/__init__.py)` file in this directory makes these routers easily importable by `main.py`.
*   **Schemas (Pydantic):** Data validation and serialization models are defined in `[app/schemas/](mdc:knowledgeplan-backend/app/schemas/)` (e.g., `[user.py](mdc:knowledgeplan-backend/app/schemas/user.py)`, `[project.py](mdc:knowledgeplan-backend/app/schemas/project.py)`). Schemas returned by API read operations generally follow the `ModelNameRead` convention (e.g., `UserRead`, `ProjectRead`). These schemas should have `model_config = {"from_attributes": True}` to work with SQLAlchemy models.
*   **Models (SQLAlchemy):** Database table definitions using SQLAlchemy ORM are in `[app/models/](mdc:knowledgeplan-backend/app/models/)` (e.g., `[user.py](mdc:knowledgeplan-backend/app/models/user.py)`, `[project.py](mdc:knowledgeplan-backend/app/models/project.py)`). Relationships between models use `relationship(..., back_populates=...)`. The `[__init__.py](mdc:knowledgeplan-backend/app/models/__init__.py)` file imports all models to make them available for Alembic and other parts of the app.
*   **CRUD Operations:** Database interaction logic (Create, Read, Update, Delete) is located in `[app/crud/](mdc:knowledgeplan-backend/app/crud/)` (e.g., `[crud_user.py](mdc:knowledgeplan-backend/app/crud/crud_user.py)`, `[crud_project.py](mdc:knowledgeplan-backend/app/crud/crud_project.py)`). These typically define a class (e.g., `CRUDUser`) with methods that take an `AsyncSession` and Pydantic schemas. The `[__init__.py](mdc:knowledgeplan-backend/app/crud/__init__.py)` exports instances of these CRUD classes.
*   **Core Logic:** Authentication helpers (`[security.py](mdc:knowledgeplan-backend/app/core/security.py)`) and configuration (`[config.py](mdc:knowledgeplan-backend/app/core/config.py)`) are in `[app/core/](mdc:knowledgeplan-backend/app/core/)`.
*   **Database:** Session management (`[session.py](mdc:knowledgeplan-backend/app/db/session.py)`) and the SQLAlchemy base class (`[base_class.py](mdc:knowledgeplan-backend/app/db/base_class.py)`) are in `[app/db/](mdc:knowledgeplan-backend/app/db/)`. Migrations are managed by Alembic in `[app/db/migrations/](mdc:knowledgeplan-backend/app/db/migrations/)`.

**Key Dependencies/Locations:**
*   `get_current_user`: `[app/core/security.py](mdc:knowledgeplan-backend/app/core/security.py)`
*   `get_db_session`: `[app/db/session.py](mdc:knowledgeplan-backend/app/db/session.py)`
