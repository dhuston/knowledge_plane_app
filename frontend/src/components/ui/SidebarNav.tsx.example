import React, { useState } from 'react';
import {
  VStack,
  Icon,
  Box,
  Divider,
  useColorModeValue,
  IconButton,
  Text,
  Flex,
  HStack,
  Badge,
  Collapse,
  useDisclosure,
} from '@chakra-ui/react';
import { StyledTooltip } from '../common/StyledTooltip';
import {
  FiHome,
  FiUsers,
  FiFolder,
  FiBook,
  FiPieChart,
  FiTarget,
  FiStar,
  FiSettings,
  FiMap,
  FiGrid,
  FiChevronRight,
  FiClock,
  FiActivity,
  FiSearch,
  FiCommand,
  FiBrain, // Added for insights
} from 'react-icons/fi';
import { MdOutlineInsights } from 'react-icons/md';
import { NavLink, useLocation } from 'react-router-dom';

// Different workspace view types
type WorkspaceViewType = 'command-center' | 'map-focus' | 'grid';

interface NavItem {
  label: string;
  icon: React.ElementType;
  path: string;
  group?: string;
  badge?: string | number;
  badgeColor?: string;
  isNew?: boolean;
  children?: NavItem[];
}

interface SidebarNavProps {
  onViewChange?: (view: WorkspaceViewType) => void;
  activeView?: WorkspaceViewType;
}

export const SidebarNav: React.FC<SidebarNavProps> = ({
  onViewChange = () => {},
  activeView = 'command-center'
}) => {
  const location = useLocation();
  const [isExpanded, setIsExpanded] = useState(false);
  const { isOpen: isRecentOpen, onToggle: onRecentToggle } = useDisclosure();

  // Enhanced primary items with badges and nested items
  const primaryItems: NavItem[] = [
    { label: 'Home', icon: FiHome, path: '/' },
    {
      label: 'Teams',
      icon: FiUsers,
      path: '/teams',
      badge: 3,
      badgeColor: 'blue',
      children: [
        { label: 'Design Team', icon: FiUsers, path: '/teams/design' },
        { label: 'Engineering', icon: FiUsers, path: '/teams/engineering' },
        { label: 'Marketing', icon: FiUsers, path: '/teams/marketing' },
      ]
    },
    {
      label: 'Projects',
      icon: FiFolder,
      path: '/projects',
      badge: 2,
      badgeColor: 'orange',
      children: [
        { label: 'Active Projects', icon: FiFolder, path: '/projects/active' },
        { label: 'Completed', icon: FiFolder, path: '/projects/completed' },
        { label: 'Archived', icon: FiFolder, path: '/projects/archived' },
      ]
    },
    {
      label: 'Goals',
      icon: FiTarget,
      path: '/goals',
      isNew: true,
    },
  ];

  // Enhanced insight items with badges - Added AI Insights here
  const insightItems: NavItem[] = [
    {
      label: 'Insights',
      icon: MdOutlineInsights,
      path: '/insights',
      badge: 5,
      badgeColor: 'purple',
    },
    // New AI Insights menu item with "new" badge
    {
      label: 'AI Insights',
      icon: FiBrain,
      path: '/insights',
      isNew: true,
      badgeColor: 'blue'
    },
    { label: 'Analytics', icon: FiPieChart, path: '/analytics' },
    { label: 'Activity', icon: FiActivity, path: '/activity' },
  ];

  // Enhanced resource items
  const resourceItems: NavItem[] = [
    { label: 'Knowledge Base', icon: FiBook, path: '/knowledge' },
    { label: 'Favorites', icon: FiStar, path: '/favorites' },
    { label: 'Settings', icon: FiSettings, path: '/settings' },
  ];

  // Recent items for quick access
  const recentItems: NavItem[] = [
    { label: 'Design Team Meeting', icon: FiClock, path: '/teams/design/meetings/123' },
    { label: 'Q3 Strategy Document', icon: FiClock, path: '/knowledge/docs/456' },
    { label: 'Project Alpha', icon: FiClock, path: '/projects/789' },
  ];

  // Enhanced styling variables for better visual hierarchy
  const iconColor = useColorModeValue('gray.600', 'gray.400');
  const activeColor = useColorModeValue('primary.500', 'primary.300');
  const activeBgColor = useColorModeValue('primary.50', 'primary.900');
  const hoverBgColor = useColorModeValue('gray.100', 'gray.700');
  const dividerColor = useColorModeValue('gray.200', 'gray.700');
  const badgeBg = useColorModeValue('gray.100', 'gray.700');
  const textColor = useColorModeValue('gray.800', 'gray.200');
  const newBadgeBg = useColorModeValue('green.100', 'green.800');
  const newBadgeColor = useColorModeValue('green.800', 'green.100');
  const expandedBg = useColorModeValue('white', 'gray.800');
  const expandedShadow = useColorModeValue('lg', 'dark-lg');
  const expandedBorder = useColorModeValue('gray.200', 'gray.700');

  // Render nav item with enhanced styling and features
  const renderNavItem = (item: NavItem, isChild = false) => {
    const isActive = location.pathname === item.path ||
                    (item.path !== '/' && location.pathname.startsWith(item.path));

    // For compact mode (icon only)
    if (!isExpanded && !isChild) {
      return (
        <Box key={item.path} position="relative" w="full">
          <StyledTooltip
            label={item.label}
            placement="right"
            hasArrow
          >
            <IconButton
              as={NavLink}
              to={item.path}
              aria-label={item.label}
              icon={<Icon as={item.icon} boxSize={5} />}
              variant="ghost"
              colorScheme={isActive ? 'primary' : 'gray'}
              color={isActive ? activeColor : iconColor}
              bg={isActive ? activeBgColor : 'transparent'}
              size="lg"
              borderRadius="lg"
              _hover={{ bg: hoverBgColor }}
              _active={{ bg: activeBgColor }}
              w="full"
            />
          </StyledTooltip>

          {/* Badge indicator */}
          {item.badge && (
            <Badge
              position="absolute"
              top="0"
              right="0"
              transform="translate(30%, -30%)"
              borderRadius="full"
              colorScheme={item.badgeColor || 'gray'}
              fontSize="xs"
              minW="18px"
              h="18px"
              textAlign="center"
              p="2px"
            >
              {item.badge}
            </Badge>
          )}

          {/* New indicator */}
          {item.isNew && !item.badge && (
            <Box
              position="absolute"
              top="0"
              right="0"
              transform="translate(30%, -30%)"
              borderRadius="full"
              bg={newBadgeBg}
              w="8px"
              h="8px"
            />
          )}
        </Box>
      );
    }

    // For expanded mode or child items
    return (
      <Box key={item.path} w="full" position="relative">
        <Flex
          as={NavLink}
          to={item.path}
          px={3}
          py={2}
          borderRadius="md"
          align="center"
          justify="space-between"
          bg={isActive ? activeBgColor : 'transparent'}
          color={isActive ? activeColor : textColor}
          _hover={{ bg: hoverBgColor }}
          _active={{ bg: activeBgColor }}
          role="group"
          transition="all 0.2s"
          fontWeight={isActive ? "medium" : "normal"}
          pl={isChild ? 8 : 3}
        >
          <HStack spacing={3}>
            <Icon
              as={item.icon}
              boxSize={isChild ? 4 : 5}
              color={isActive ? activeColor : iconColor}
              _groupHover={{ color: activeColor }}
            />
            <Text fontSize={isChild ? "sm" : "md"}>{item.label}</Text>

            {/* New indicator as text */}
            {item.isNew && (
              <Badge
                colorScheme="green"
                variant="subtle"
                fontSize="xs"
                borderRadius="full"
              >
                New
              </Badge>
            )}
          </HStack>

          {/* Badge or children indicator */}
          {(item.badge || item.children) && (
            <Flex align="center">
              {item.badge && (
                <Badge
                  borderRadius="full"
                  colorScheme={item.badgeColor || 'gray'}
                  fontSize="xs"
                  minW="20px"
                  textAlign="center"
                >
                  {item.badge}
                </Badge>
              )}

              {item.children && (
                <Icon
                  as={FiChevronRight}
                  boxSize={4}
                  ml={1}
                  transform={isActive ? "rotate(90deg)" : "none"}
                  transition="transform 0.2s"
                />
              )}
            </Flex>
          )}
        </Flex>

        {/* Render children if active */}
        {item.children && isActive && (
          <VStack align="start" spacing={1} mt={1} w="full">
            {item.children.map(child => renderNavItem(child, true))}
          </VStack>
        )}
      </Box>
    );
  };

  // Rest of component implementation...
  // This is an example file to show where to add the insights navigation item
};

export default SidebarNav;