import React, { useState, useEffect } from 'react';
import {
  Box,
  Heading,
  Text,
  Button,
  Spinner,
  useColorModeValue,
  VStack,
  Icon,
  HStack,
  Divider
} from '@chakra-ui/react';
import { FiRefreshCw, FiClock, FiAward } from 'react-icons/fi';
import { useInsights } from '../../context/InsightsContext';
import OpenAIService from '../../services/OpenAIService';
import ReactMarkdown from 'react-markdown';

interface InsightsDailySummaryProps {
  maxChars?: number;
  maxHeight?: string;
  personalizationContext?: Record<string, any>;
}

/**
 * Component that displays an AI-generated daily summary of insights
 */
const InsightsDailySummary: React.FC<InsightsDailySummaryProps> = ({ 
  maxChars = 500,
  maxHeight,
  personalizationContext
}) => {
  const [summary, setSummary] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  
  const { insights, loading: insightsLoading } = useInsights();
  
  const bgColor = useColorModeValue('white', 'gray.800');
  const headerBgColor = useColorModeValue('blue.50', 'blue.900');
  const borderColor = useColorModeValue('gray.200', 'gray.700');
  const mutedColor = useColorModeValue('gray.600', 'gray.400');

  // Generate summary when insights are loaded or change
  useEffect(() => {
    const generateSummary = async () => {
      if (insightsLoading || insights.length === 0 || !OpenAIService.isAvailable()) {
        return;
      }

      setIsLoading(true);
      setError(null);

      try {
        // Get personalized summary from OpenAI
        const generatedSummary = await OpenAIService.generateInsightSummary(insights, personalizationContext);
        setSummary(generatedSummary);
        setLastUpdated(new Date());
      } catch (err) {
        console.error('Error generating insights summary:', err);
        setError('Unable to generate summary. Please try again.');
      } finally {
        setIsLoading(false);
      }
    };

    generateSummary();
  }, [insights, insightsLoading, personalizationContext]);

  // Get the fetchInsights function from context
  const { fetchInsights } = useInsights();
  
  // Handle refresh button click
  const handleRefresh = async () => {
    setIsLoading(true);
    setError(null);

    try {
      // Refresh insights data
      await fetchInsights('daily');
      
      // Summary will be generated by the useEffect when insights are loaded
    } catch (err) {
      console.error('Error refreshing insights:', err);
      setError('Unable to refresh insights. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  // Format the last updated time
  const formatLastUpdated = () => {
    if (!lastUpdated) return 'Never';
    
    return new Intl.DateTimeFormat('en-US', {
      hour: 'numeric',
      minute: 'numeric',
      hour12: true
    }).format(lastUpdated);
  };

  // Create common card wrapper
  const SummaryCard = ({children, showHeader = true}: {children: React.ReactNode, showHeader?: boolean}) => (
    <Box
      bg={bgColor}
      borderWidth="1px"
      borderRadius="md"
      borderColor={borderColor}
      overflow="hidden"
      boxShadow="sm"
      maxHeight={maxHeight}
      overflowY={maxHeight ? "auto" : "visible"}
      transition="all 0.2s"
    >
      {showHeader && (
        <Box 
          bg={headerBgColor}
          px={4} 
          py={3}
          borderBottomWidth="1px"
          borderColor={borderColor}
        >
          <HStack justify="space-between" align="center">
            <HStack spacing={2}>
              <Icon as={FiAward} boxSize={4} color="primary.500" />
              <Heading size="sm" fontWeight="semibold">Daily Summary</Heading>
            </HStack>
            <Text fontSize="xs" color={mutedColor}>
              {lastUpdated ? `Updated ${formatLastUpdated()}` : 'Not yet generated'}
            </Text>
          </HStack>
        </Box>
      )}
      {children}
    </Box>
  );

  // Show loading state
  if (isLoading || insightsLoading) {
    return (
      <SummaryCard>
        <Box p={4} textAlign="center" py={6}>
          <VStack spacing={3}>
            <Spinner size="md" color="primary.500" thickness="2px" speed="0.8s" />
            <Text fontSize="sm">Generating your summary...</Text>
          </VStack>
        </Box>
      </SummaryCard>
    );
  }

  // Handle error state
  if (error) {
    return (
      <SummaryCard>
        <Box p={4} textAlign="center" py={6}>
          <VStack spacing={3}>
            <Text fontSize="sm" color="red.500">{error}</Text>
            <Button 
              variant="ghost" 
              size="xs" 
              colorScheme="blue" 
              onClick={handleRefresh}
              fontWeight="normal"
            >
              Try Again
            </Button>
          </VStack>
        </Box>
      </SummaryCard>
    );
  }

  // If no insights available
  if (insights.length === 0) {
    return (
      <SummaryCard>
        <Box p={4} textAlign="center" py={6}>
          <Text fontSize="sm">No insights available to summarize.</Text>
          {!OpenAIService.isAvailable() && (
            <Text mt={3} fontSize="xs" color={mutedColor}>
              OpenAI API key not configured. Add your key to enable AI-generated summaries.
            </Text>
          )}
        </Box>
      </SummaryCard>
    );
  }

  // Display the summary
  return (
    <SummaryCard>
      <Box p={4}>
        <Box 
          className="markdown-content"
          sx={{
            'h1': { 
              fontSize: 'lg', 
              fontWeight: 'semibold', 
              mb: 2,
              mt: 0
            },
            'h2': { 
              fontSize: 'md', 
              fontWeight: 'medium', 
              mb: 2,
              mt: 3 
            },
            'p': { 
              fontSize: 'sm', 
              mb: 3,
              lineHeight: 'taller'
            },
            'ul, ol': { 
              fontSize: 'sm', 
              pl: 4, 
              mb: 3 
            },
            'li': {
              mb: 1
            },
            'strong': { 
              fontWeight: 'medium',
              color: 'primary.600'
            }
          }}
        >
          <ReactMarkdown>
            {summary.length > maxChars
              ? `${summary.substring(0, maxChars)}...`
              : summary
            }
          </ReactMarkdown>
        </Box>
        
        <Box textAlign="right" mt={3}>
          <Button
            rightIcon={<FiRefreshCw size="14px" />}
            size="xs"
            variant="ghost"
            colorScheme="blue"
            onClick={handleRefresh}
            fontWeight="normal"
          >
            Refresh
          </Button>
        </Box>
      </Box>
    </SummaryCard>
  );
};

export default InsightsDailySummary;